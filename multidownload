#!/usr/bin/env python3.6

import argparse
import asyncio
import logging
import logging.config
import posixpath

from os import path
from sys import stdin
from urllib.parse import urlparse

import aiohttp

logger = logging.getLogger(__name__)


def make_filename(url):
    return posixpath.basename(
        urlparse(url).path
    )


async def fetch(url, session, destpath):
    async with session.get(url) as response:
        filename = response.headers.get('Content-Disposition') or make_filename(url)
        fullpath = path.join(destpath, filename)
        with open(fullpath, 'wb') as f:
            f.write(await response.read())
        logger.info(f'{url} â†’ {fullpath}')


async def run(destpath):
    urls = map(lambda x: x.strip(), stdin.readlines())
    async with aiohttp.ClientSession() as session:
        tasks = [
            asyncio.ensure_future(fetch(url, session, destpath))
            for url in urls
        ]
        logger.info(f'Downloading from {len(tasks)} urls')

        await asyncio.gather(*tasks)


command_parser = argparse.ArgumentParser()
command_parser.add_argument(
    'path', help='Destination dir', nargs='?', default='.')


if __name__ == '__main__':
    logging.config.dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(asctime)s:%(name)s:%(levelname)s: %(message)s',
                'datefmt': '%Y-%m-%d %H:%M:%S %z',
            },
        },
        'loggers': {
            '': {
                'level': logging.INFO,
                'handlers': ['console'],
                'propagate': 0,
            },
            'root': {
                'level': logging.WARNING,
                'handlers': ['console'],
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'level': logging.INFO,
                'formatter': 'simple',
            }
        }
    })

    args = command_parser.parse_args()

    loop = asyncio.get_event_loop()
    future = asyncio.ensure_future(run(args.path))
    loop.run_until_complete(future)
